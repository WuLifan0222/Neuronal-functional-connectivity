% This function is used to generate SNN with given intial state and the
% external input

function [Fr,S,frac,proj]=runSNN_v2_showfrac(ini,W,T,tau,E,N,dT)
    % ini: initial state
    % W: The connection matrix
    % E: The external input, neuron number x T number x input type
    % N: The noise (optional)
    % T: Time steps to run
    % tau: The temporal parameter of node

    if ndims(E)==3
        E=squeeze(sum(E,3)) ; % sum over different kind of input
    end

    maxSpkRate= 5; % Max spike rate
    tauCa=2; % The decreasing parameter of Calcium
    nonlinearity   = @(x) tanh(x); % nonlinear function (membrane potential -> firing rate)
%     nonlinearity = @(x) 1./(1+exp(-2*(x)))*2-1; % tanh(x)=1./(1+exp(-2*(x)))*2-1
    nNeuron=length(ini);
    
    Fr=zeros(nNeuron,T); % Firing rate (collect result)
    S=zeros(nNeuron,T); % The spikes, generated by poisson process
    Ca=zeros(nNeuron,T);

    if ~exist('N','var')
        N=zeros(nNeuron,T);
    end

    % Evolve 
    H=ini; % The initial membrane potential
    frac=zeros(nNeuron,T,2);
    proj=zeros(nNeuron,T);
    for tt=1:T
        Fr(:,tt)=nonlinearity(H);
        JR = W*nonlinearity(H) + E(:,tt)+N(:,tt) ;
        frac(:,tt,1)=abs(E(:,tt))./abs(W*nonlinearity(H));
        frac(:,tt,2)=abs(N(:,tt))./abs(W*nonlinearity(H));
        proj(:,tt)=W*nonlinearity(H);
        H = H + (-H + JR )/(tau/dT) ; % The membrane potential of next step
    end

    % Generate the spikes
    for inn=1:nNeuron
        for tt=1:T
            if rand<(Fr(inn,tt)+1)/2*maxSpkRate*dT
                S(inn,tt)=1;
            end
        end
    end
    
    Ca(:,1)=0;
    for tt=2:T
        Ca(:,tt)=Ca(:,tt-1)+(-Ca(:,tt-1))/(tauCa/dT)+S(:,tt-1);
    end

end